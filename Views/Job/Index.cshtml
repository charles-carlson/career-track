@model CareerTrack.Models.PagedViewModel
@{
    ViewData["Title"] = "Job Page";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - CareerTrack</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/CareerTrack.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.min.css">
</head>
<body>
    <div id="overlay">
        <div class="edit-overlay">
            <div class="edit-overlay-window">
                <div class="edit-overlay-header">
                    <button class="close" onclick="off()">&times;</button>
                </div>
                <div class="edit-overlay-body"></div>
            </div>
        </div>
    </div>
    <div>
        <h1>Careers</h1>
        <p>You have applied to @ViewData["jobSum"] job listings</p>
    </div>
    <div>
        <div class="table-header">
        </div>
        <div>
            <div class="search-header">
                <div class="icon-header">
                    <a id="icon-button">
                        <i id="icon" class="bi bi-plus-lg"></i>
                    </a>
                </div>
                @using (Html.BeginForm("Index", "Job", new { page = Model.PageInfo.PageNumber, pageSize = ViewData["Selected"] }, FormMethod.Get, null, new { @class = "search-bar-form" }))
                    {

                    <input type="text" id="searchInput" placeholder="Search..." name="filter" value="@Model.Filter" />
                    <input id="search-button" type="submit" value="Search" />
                    }

            </div>
        </div>
        <table style="width:100%;table-layout:fixed">
            <thead>
                <tr class="th-header">
                    
                    @for (int i = 0; i < Model.Columns.Count; i++)
                    {

                        var colName = Model.Columns[i];
                        <th class="th-row">

                            <form id="form-@i" method="get" action="@Url.Action("Index","Job")">
                                @Html.Hidden("filter", ViewData["Filter"])
                                @Html.Hidden("pageSize", ViewData["Selected"])
                                @Html.Hidden("sort", Model.Sort)
                                <input type="hidden" name="col" value="@colName" />
                                @colName
                                <a class="sort-icon" onclick="submitForm('@i','@colName'); return false;"><i style="float: right; font-size: 1em;" class="bi bi-filter"></i></a>
                            </form>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var j in Model.Data)
                {
                    <tr class="job-item-row" id="@j.Id">
                        <td>
                            @Html.DisplayFor(modelItem => j.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => j.Position)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => j.Languages)
                        </td>
                        <td>
                            @{
                                var newDate = j.DateApplied.ToString("MM/dd/yyyy");
                            }
                            @newDate
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => j.Location)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => j.IsWFH)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => j.Salary)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => j.ReplyBack)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => j.Interview)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => j.Offer)
                        </td>
                        <td>
                            @{  @using System.Text.RegularExpressions;
                                Console.WriteLine(j.Source);
                                string output = "";
                                if (j.Source != null)
                                {

                                    var url = j.Source.ToString();
                                    Console.WriteLine(url.Contains(".com").ToString(), "url contains this ending");
                                    string[] types = new string[] { ".com", ".net", ".org", ".io", ".gov" };
                                    string reg_pattern = "";
                                    string correctType = types.FirstOrDefault<string>(s => url.Contains(s));
                                    switch (correctType)
                                    {
                                        case ".com":
                                            reg_pattern = @"https://.*?\.com";
                                            Console.WriteLine("source is .com site");
                                            break;
                                        case ".net":
                                            reg_pattern = @"https://.*?\.net";
                                            Console.WriteLine("source is .net site");
                                            break;
                                        case ".org":
                                            reg_pattern = @"https://.*?\.org";
                                            Console.WriteLine("source is .org site");
                                            break;
                                        case ".io":
                                            reg_pattern = @"https://.*?\.io";
                                            Console.WriteLine("source is .io site");
                                            break;
                                        case ".gov":
                                            reg_pattern = @"https://.*?\.gov";
                                            Console.WriteLine("source is .gov site");
                                            break;
                                    }
                                    Console.WriteLine(reg_pattern);
                                    Match match = Regex.Match(url, reg_pattern, RegexOptions.IgnoreCase);
                                    output = match.Value;
                                    Console.WriteLine(output,"this is out");

                                }
                                else
                                {
                                    output = "Data not found for this entry";
                                }
                                }
                            <a id="SourceCol" href="@j.Source" target="_blank">@output</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div>

            <nav aria-label="pagination">
                @using (Html.BeginForm("Index", "Job", FormMethod.Get, new {@class="page-size-dropdown"}))
                {
                    @Html.DropDownList("pageSize", new SelectList(new List<int> { 10, 25, 50, 100 }, ViewData["Selected"]), new { @class = "pageSize-dropdown", @onchange = "this.form.submit()" })
                    @Html.Hidden("filter", ViewData["Filter"])
                    @Html.Hidden("sort", Model.Sort)
                    @Html.Hidden("col", ViewData["Col"])
                }
                <ul class="pagination">
                    @for (int i = 1; i <= Model.PageInfo.TotalPages; i++)
                    {
                        <li class="@(i == Model.PageInfo.PageNumber ? "active" : "")">
                            <a href="@Url.Action("Index",new { page = i, pageSize = ViewData["Selected"],filter = ViewData["Filter"], sort = Model.Sort, col = ViewData["col"] })">@i</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
</body>

</html>
@section scripts{
    <script>
        function submitForm(formId, colName) {
            var form = document.getElementById('form-' + formId);
            var sortInput = form.querySelector('[name="sort"]');
            sortInput.value = sortInput.value === 'asc' ? 'desc' : 'asc';

            var formData = new FormData(form);
            var url = form.getAttribute('action') + '?' + new URLSearchParams(formData).toString();

            history.pushState({}, '', url);
            form.submit();
        }
    function EditOverlay(id) {
        console.log(id);
        $.get("@Url.Action("Edit","Job")/" + id, function (data) {
            $('.edit-overlay-body').html(data);
            document.getElementById("overlay").style.display = "block";
        });

    }
    function AddOverlay() {
        console.log('Adding a job');
        $.get("@Url.Action("Add","Job")", (data) => {
            $('.edit-overlay-body').html(data);
            document.getElementById("overlay").style.display = "block";
        })
        }

    function on() {
        document.getElementById("overlay").style.display = "block";
    }

    function off() {
        document.getElementById("overlay").style.display = "none";
        }
        document.addEventListener('DOMContentLoaded', () => {
            var icon = document.getElementById('icon-button');
            icon.addEventListener('click', function () {
                AddOverlay();
            });
        })
    document.addEventListener('DOMContentLoaded', function () {
        var jobs = document.getElementsByClassName('job-item-row');
        for (let i = 0; i < jobs.length; i++) {
            jobs[i].addEventListener('click', function () {
                EditOverlay(jobs[i].id);
            });
        }
    });
    </script>
}
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
